//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controles.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInputs
{
    public partial class @GameInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controles"",
    ""maps"": [
        {
            ""name"": ""MainPlayer"",
            ""id"": ""3edc5cab-6bfe-46b5-b2f7-a5e24ab804d0"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""09bad414-acbe-425b-8d5f-b6c9b0c66d9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""aa4d257f-b2f2-46bb-8503-05ebbc69de35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chat"",
                    ""type"": ""Button"",
                    ""id"": ""ac07ded3-f037-42c1-a98d-069b3b38f19a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""2abf9679-b16f-485f-801b-6bb3429b92c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""530be06c-653a-4622-bd65-2679dfd7cd7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""389997dd-c953-459b-8e0f-9759579d17c5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fad01283-c957-4609-86a2-1c2a31ce0df0"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b89862e-8069-4787-bc32-9800ce4f3227"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""075cb8e9-c18f-43aa-ad40-ab5112686201"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ff62009-0bbe-45ab-b338-daac166f6e25"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2534170-6b5f-4056-aeaa-4529792d1c19"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79aa2693-ad9d-4adb-b09d-29282ffbfb12"",
                    ""path"": ""<Keyboard>/#(F)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""e40a4430-a794-474e-9e43-0992db55e971"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fd86e81a-3a48-4704-8a2a-c626450b2666"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2dd8c7c7-08d5-4f07-9322-2eddff54ee73"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""id"": ""2c8e0857-02be-4ab4-945c-1c9258430e0c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""35920214-85d5-465a-b8a5-24859f4faf89"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""198e00e0-739a-4b49-9754-da4fe02f48f7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MainPlayer
            m_MainPlayer = asset.FindActionMap("MainPlayer", throwIfNotFound: true);
            m_MainPlayer_Attack = m_MainPlayer.FindAction("Attack", throwIfNotFound: true);
            m_MainPlayer_SwitchWeapon = m_MainPlayer.FindAction("SwitchWeapon", throwIfNotFound: true);
            m_MainPlayer_Chat = m_MainPlayer.FindAction("Chat", throwIfNotFound: true);
            m_MainPlayer_PickWeapon = m_MainPlayer.FindAction("PickWeapon", throwIfNotFound: true);
            m_MainPlayer_Movement = m_MainPlayer.FindAction("Movement", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MainPlayer
        private readonly InputActionMap m_MainPlayer;
        private List<IMainPlayerActions> m_MainPlayerActionsCallbackInterfaces = new List<IMainPlayerActions>();
        private readonly InputAction m_MainPlayer_Attack;
        private readonly InputAction m_MainPlayer_SwitchWeapon;
        private readonly InputAction m_MainPlayer_Chat;
        private readonly InputAction m_MainPlayer_PickWeapon;
        private readonly InputAction m_MainPlayer_Movement;
        public struct MainPlayerActions
        {
            private @GameInput m_Wrapper;
            public MainPlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_MainPlayer_Attack;
            public InputAction @SwitchWeapon => m_Wrapper.m_MainPlayer_SwitchWeapon;
            public InputAction @Chat => m_Wrapper.m_MainPlayer_Chat;
            public InputAction @PickWeapon => m_Wrapper.m_MainPlayer_PickWeapon;
            public InputAction @Movement => m_Wrapper.m_MainPlayer_Movement;
            public InputActionMap Get() { return m_Wrapper.m_MainPlayer; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainPlayerActions set) { return set.Get(); }
            public void AddCallbacks(IMainPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_MainPlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainPlayerActionsCallbackInterfaces.Add(instance);
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @SwitchWeapon.started += instance.OnSwitchWeapon;
                @SwitchWeapon.performed += instance.OnSwitchWeapon;
                @SwitchWeapon.canceled += instance.OnSwitchWeapon;
                @Chat.started += instance.OnChat;
                @Chat.performed += instance.OnChat;
                @Chat.canceled += instance.OnChat;
                @PickWeapon.started += instance.OnPickWeapon;
                @PickWeapon.performed += instance.OnPickWeapon;
                @PickWeapon.canceled += instance.OnPickWeapon;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }

            private void UnregisterCallbacks(IMainPlayerActions instance)
            {
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @SwitchWeapon.started -= instance.OnSwitchWeapon;
                @SwitchWeapon.performed -= instance.OnSwitchWeapon;
                @SwitchWeapon.canceled -= instance.OnSwitchWeapon;
                @Chat.started -= instance.OnChat;
                @Chat.performed -= instance.OnChat;
                @Chat.canceled -= instance.OnChat;
                @PickWeapon.started -= instance.OnPickWeapon;
                @PickWeapon.performed -= instance.OnPickWeapon;
                @PickWeapon.canceled -= instance.OnPickWeapon;
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
            }

            public void RemoveCallbacks(IMainPlayerActions instance)
            {
                if (m_Wrapper.m_MainPlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_MainPlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainPlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainPlayerActions @MainPlayer => new MainPlayerActions(this);
        public interface IMainPlayerActions
        {
            void OnAttack(InputAction.CallbackContext context);
            void OnSwitchWeapon(InputAction.CallbackContext context);
            void OnChat(InputAction.CallbackContext context);
            void OnPickWeapon(InputAction.CallbackContext context);
            void OnMovement(InputAction.CallbackContext context);
        }
    }
}
